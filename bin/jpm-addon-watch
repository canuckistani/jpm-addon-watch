#!/usr/bin/env node
var path = require("path");

var VERSION = require("../package.json").version;

var run = require("jpm/lib/run");
var cmd = require("jpm/lib/cmd");
var xpi = require("jpm/lib/xpi");

var console = require("jpm/lib/utils").console;
var program = require("jpm/node_modules/commander");

program
  .version(VERSION)
  .option("-b, --binary <path>", "Path of Firefox binary to use.")
  .option("-p, --profile <path>", "Path or name of Firefox profile to use.")
  .option("--no-copy", "Do not copy the profile.  Use with caution!")
  .option("-v, --verbose", "More verbose logging to stdout.")
  .option("-o, --overload [path]", "Overloads the built-in Firefox SDK modules with a local copy located at environment variable `JETPACK_ROOT` or `path` if supplied. Used for development on the SDK itself.")
  .option("-f, --filter <pattern>", "--filter=FILENAME[:TESTNAME] only run tests whose filenames match FILENAME and " +
                      "optionally match TESTNAME, both regexps")
  .option("--binary-args <CMDARGS>", "Pass additional arguments into Firefox.")
  .option("--prefs <path>", "Custom set user preferences (path to a json file)")
  .option("--stop-on-error", "Stop running tests after the first failure")
  .option("--do-not-quit", "Do not close Firefox on a test failure")
  .option("--tbpl", "Print test output in TBPL format")
  .option("--times <n>", "Number of times to run tests")
  .option("--debug", "Enable the add-on debugger when running the add-on")
  .option("--check-memory", "Enable leaked tracker that attempts to report compartments leaked")
  .option("--profile-memory", "Enable profiling of memory usage")
  .option("--retro", "In development flag for transitioning to new style addons; forces the lack of install.rdf/bootstrap.js creation regardless of what engine versions are running");

program
  .command("run [addon_path]")
  .option("--watch-interval <milliseconds>", "Watch interval in milliseconds.")
  .description("Install, run and livereload in Firefox the specified addon")
  .action(function (addonDir, options) {
    cmd.prepare("run", program, function(manifest) {
      console.log("JPM WATCH", addonDir, options.watchInterval);

      var addonManifest = require(path.join(addonDir,"package.json"));
      var watchInterval = options.watchInterval;

      console.log("WATCHED ADDON MANIFEST", addonManifest);

      var addonId = addonManifest.id || "@" + addonManifest.name;
      process.env["WATCH_ADDON_ID"] = addonId;
      process.env["WATCH_ADDON_PATH"] = addonDir;
      if (watchInterval) {
        process.env["WATCH_INTERVAL"] = watchInterval;
      }

      run(manifest, program).then(null, console.error);
    })();
  });

program
  .command("xpi")
  .description("Bundle the addon into an .xpi file")
  .action(cmd.prepare("xpi", program, function (manifest) {
    xpi(manifest, program).then(function (xpiPath) {
      console.log("Successfully created xpi at " + xpiPath);
    }, function (reason) {
      console.error("xpi creation failed: " + reason);
    });
  }));

process.cwd(path.join(path.dirname(module.filename), '..'));

program.parse(process.argv);

// If no command (run, xpi, init, etc.) specified, display basic help
if (cmd.isEmptyCommand(program)) {
  program.help();
}
